#!/usr/bin/env python3
"""
Script de mantenimiento de base de datos para Sentrix Backend
Proporciona utilidades para limpieza, optimizaci√≥n y an√°lisis de datos
"""

import os
import sys
import asyncio
from datetime import datetime, timedelta
from pathlib import Path

# Agregar directorio ra√≠z del proyecto al path
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import text, func
from app.database import get_db_session
from app.models.models import Analysis, Detection, UserProfile
from app.models.enums import ValidationStatusEnum


def imprimir_encabezado(titulo):
    """Imprime encabezado formateado"""
    print(f"\n{'='*60}")
    print(f" {titulo}")
    print('='*60)


def limpiar_analisis_antiguos(dias=30):
    """Limpia an√°lisis y detecciones m√°s antiguos que N d√≠as"""
    imprimir_encabezado(f"LIMPIEZA DE AN√ÅLISIS ANTIGUOS ({dias} d√≠as)")

    fecha_limite = datetime.utcnow() - timedelta(days=dias)

    with get_db_session() as db:
        # Contar an√°lisis a eliminar
        count_analisis = db.query(Analysis).filter(
            Analysis.created_at < fecha_limite
        ).count()

        if count_analisis == 0:
            print("‚úì No hay an√°lisis antiguos para eliminar")
            return

        print(f"‚ö†Ô∏è  Se eliminar√°n {count_analisis} an√°lisis anteriores al {fecha_limite.date()}")

        # Confirmar acci√≥n
        respuesta = input("¬øContinuar? (s/N): ").lower()
        if respuesta != 's':
            print("‚ùå Operaci√≥n cancelada")
            return

        # Eliminar an√°lisis (las detecciones se eliminan por cascade)
        eliminados = db.query(Analysis).filter(
            Analysis.created_at < fecha_limite
        ).delete()

        db.commit()
        print(f"‚úÖ {eliminados} an√°lisis eliminados exitosamente")


def optimizar_base_datos():
    """Ejecuta comandos de optimizaci√≥n de PostgreSQL"""
    imprimir_encabezado("OPTIMIZACI√ìN DE BASE DE DATOS")

    with get_db_session() as db:
        try:
            # An√°lisis de tablas
            print("üîç Ejecutando ANALYZE en todas las tablas...")
            db.execute(text("ANALYZE;"))

            # Vacuum para recuperar espacio
            print("üßπ Ejecutando VACUUM...")
            db.execute(text("VACUUM;"))

            # Reindexar si es necesario
            print("üìá Reindexando tablas principales...")
            db.execute(text("REINDEX TABLE analyses;"))
            db.execute(text("REINDEX TABLE detections;"))

            db.commit()
            print("‚úÖ Optimizaci√≥n completada")

        except Exception as e:
            print(f"‚ùå Error durante optimizaci√≥n: {e}")
            db.rollback()


def generar_estadisticas():
    """Genera estad√≠sticas de uso de la base de datos"""
    imprimir_encabezado("ESTAD√çSTICAS DE BASE DE DATOS")

    with get_db_session() as db:
        # Estad√≠sticas generales
        total_usuarios = db.query(UserProfile).count()
        total_analisis = db.query(Analysis).count()
        total_detecciones = db.query(Detection).count()

        print(f"üìä Usuarios registrados: {total_usuarios}")
        print(f"üìä Total an√°lisis: {total_analisis}")
        print(f"üìä Total detecciones: {total_detecciones}")

        # An√°lisis por mes (√∫ltimos 6 meses)
        print("\nüìà An√°lisis por mes (√∫ltimos 6 meses):")
        resultado = db.query(
            func.date_trunc('month', Analysis.created_at).label('mes'),
            func.count(Analysis.id).label('cantidad')
        ).filter(
            Analysis.created_at >= datetime.utcnow() - timedelta(days=180)
        ).group_by(
            func.date_trunc('month', Analysis.created_at)
        ).order_by('mes').all()

        for mes, cantidad in resultado:
            print(f"  {mes.strftime('%Y-%m')}: {cantidad} an√°lisis")

        # Detecciones por tipo
        print("\nü¶ü Detecciones por tipo de sitio de cr√≠a:")
        resultado = db.query(
            Detection.breeding_site_type,
            func.count(Detection.id).label('cantidad')
        ).group_by(
            Detection.breeding_site_type
        ).order_by('cantidad DESC').all()

        for tipo, cantidad in resultado:
            if tipo:
                print(f"  {tipo.value}: {cantidad} detecciones")

        # Estado de validaciones
        print("\n‚úÖ Estado de validaciones:")
        resultado = db.query(
            Detection.validation_status,
            func.count(Detection.id).label('cantidad')
        ).group_by(
            Detection.validation_status
        ).all()

        for estado, cantidad in resultado:
            print(f"  {estado.value}: {cantidad} detecciones")


def verificar_integridad():
    """Verifica la integridad de los datos"""
    imprimir_encabezado("VERIFICACI√ìN DE INTEGRIDAD")

    with get_db_session() as db:
        errores = []

        # Verificar an√°lisis hu√©rfanos (sin usuario)
        analisis_huerfanos = db.query(Analysis).filter(
            ~Analysis.user_id.in_(
                db.query(UserProfile.id)
            )
        ).count()

        if analisis_huerfanos > 0:
            errores.append(f"‚ùå {analisis_huerfanos} an√°lisis sin usuario v√°lido")

        # Verificar detecciones hu√©rfanas (sin an√°lisis)
        detecciones_huerfanas = db.query(Detection).filter(
            ~Detection.analysis_id.in_(
                db.query(Analysis.id)
            )
        ).count()

        if detecciones_huerfanas > 0:
            errores.append(f"‚ùå {detecciones_huerfanas} detecciones sin an√°lisis v√°lido")

        # Verificar consistencia de conteos
        for analisis in db.query(Analysis).limit(100):
            detecciones_reales = db.query(Detection).filter_by(
                analysis_id=analisis.id
            ).count()

            if analisis.total_detections != detecciones_reales:
                errores.append(
                    f"‚ùå An√°lisis {analisis.id}: cuenta {analisis.total_detections} "
                    f"pero tiene {detecciones_reales} detecciones"
                )

        if not errores:
            print("‚úÖ No se encontraron problemas de integridad")
        else:
            print("‚ö†Ô∏è  Problemas encontrados:")
            for error in errores[:10]:  # Mostrar solo los primeros 10
                print(f"  {error}")

            if len(errores) > 10:
                print(f"  ... y {len(errores) - 10} problemas m√°s")


def main():
    """Funci√≥n principal del script"""
    print("üîß Script de Mantenimiento de Base de Datos - Sentrix Backend")
    print("=" * 60)

    opciones = {
        "1": ("Limpiar an√°lisis antiguos", limpiar_analisis_antiguos),
        "2": ("Optimizar base de datos", optimizar_base_datos),
        "3": ("Generar estad√≠sticas", generar_estadisticas),
        "4": ("Verificar integridad", verificar_integridad),
        "5": ("Ejecutar todo", None)
    }

    print("\nüìã Opciones disponibles:")
    for clave, (descripcion, _) in opciones.items():
        print(f"  {clave}. {descripcion}")

    print("  0. Salir")

    while True:
        try:
            opcion = input("\nüîΩ Seleccionar opci√≥n (0-5): ").strip()

            if opcion == "0":
                print("üëã ¬°Hasta luego!")
                break
            elif opcion == "5":
                # Ejecutar todo
                for clave in ["2", "4", "3"]:  # Optimizar, verificar, estad√≠sticas
                    _, funcion = opciones[clave]
                    if funcion:
                        funcion()
                print("\nüéâ Mantenimiento completo terminado")
            elif opcion in opciones:
                descripcion, funcion = opciones[opcion]
                if funcion:
                    if opcion == "1":
                        # Pedir d√≠as para limpieza
                        try:
                            dias = int(input("üìÖ D√≠as de antig√ºedad (default 30): ") or "30")
                            funcion(dias)
                        except ValueError:
                            print("‚ùå N√∫mero de d√≠as inv√°lido")
                    else:
                        funcion()
                else:
                    print("‚ùå Opci√≥n no implementada")
            else:
                print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")

        except KeyboardInterrupt:
            print("\n\nüëã Operaci√≥n cancelada por el usuario")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")


if __name__ == "__main__":
    main()